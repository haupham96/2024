1. npm create vue@latest 

2. For re-render
import {ref, reactive} from vue
ref: primitive
     ref(0) <=> ref.value = 0
reactive: obj or ref type.

3. 2 way bindings:
    using v-model

4. passing data to children:
<children hihi='abc' />

    Children.script:
    var props = defineProps(['hihi']);
    
5. Custom event:
  a. event only
    Children:
        $emit('eventName');
    Father:
        <children @eventName="doSth" />
  b. event with datas
      Children:
          $emit('eventName', a, b, c, d);
      Father:
          <children @eventName="doSth" />
          const doSth = (a, b, c, d) => do...
      :: children pass a,b,c,d params to fathers.
      
6. Provide and inject:
import {provide, inject} from 'vue'
<Root>
provide('data', {prop1: 'abc'})
<Root>

<Child>
var data = inject('data');
<Child>

7. Life Circle:
- mount
- onMounted
- onBeforeUpdate
- onUpdated
- onBeforeUnMounted
- onUnMounted
import 
{
    mount,
    onMounted,
    onBeforeUpdate,
    onUpdated,
    onBeforeUnMounted,
    onUnMounted
} from 'vue'

8. Watch:
import {watch} from vue.
const mess = ref('hiih')
watch(mess, (new, old) => doSth...)

9. Template REF:
<h1 :ref="refFunc" >
const refFunc = (elementRef) => doSth..

defineExpose(count, increment)
to send these to father component for using.

10. asyncChronousComponent:
using when we want to load component only when need.

11. Composable:
convention: useXXX.vue

using when we want to reuse logic of component,
not the whole UI.

DEFINE:
export function useCounter(count) {
const increase = () => count++
const decrease = () => count--
return {count, increase, decrease}
}

USING:
import { useCounter }

const counter = useCounter(0);
counter.count;
counter.increase
counter.decrease

12. Custom Directive:
v-model, v-bind is builtin directives

DEFINE:
const vFormatDiv = {
    // element: <div>
    // binding.value: 12
    // binding.arg == 'orange'
    mounted: (element, binding) => {
      element.style = ...
    }
}

USING:
<div v-format-div="12">
<div v-format-div:orange>

13. dynamic component:
<component :is="Component" />

